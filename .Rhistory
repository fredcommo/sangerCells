pairs(pcaProbes$x[,2:4], pch = 19, cex = 0.5, col = Cols)
Cols <- ifelse(grepl('random', rownames(eset)), 'red', ifelse(grepl('signif', rownames(eset)), 'blue', 'grey'))
Cols[bestFull] <- 'cyan'
Cols[bestFilt] <- 'steelblue3'
Cols[setdiff(bestClust, c(bestFull, bestFilt))] <- 'seagreen4'
pairs(pcaProbes$x[,2:4], pch = 19, cex = 0.5, col = Cols)
# Filtering on Kim Lung data
# Generates random probes by picking in the real probes, and randomly switch the samples
require(splines)
source('~/Fred_Scripts/pcaSelect.R')
source('~/Fred_Scripts/pcaInfo.R')
source('~/Fred_Scripts/pcaTrace.R')
source('~/Fred_Scripts/plotPCA.R')
op <- par(no.readonly = TRUE)
.computeBounds <- function(M, S){
mCuts <- cut(M, breaks = seq(min(M, na.rm = TRUE), max(M, na.rm = TRUE), by = 0.2)) #
labs <- levels(mCuts)
mBounds <- cbind.data.frame(lower = as.numeric( sub("\\((.+),.*", "\\1", labs) ),
upper = as.numeric( sub("[^,]*,([^]]*)\\]", "\\1", labs) ))
mBounds$lower[1] <- min(M, na.rm = TRUE)
mBounds$upper[nrow(mBounds)] <- max(M, na.rm = TRUE)
mBounds <- cbind.data.frame(lower = mBounds$lower, med = (mBounds$upper + mBounds$lower)/2, upper = mBounds$upper)
sBounds <- lapply(seq(1, nrow(mBounds)), function(x){
index <- as.numeric(which(M >= mBounds$lower[x] & M < mBounds$upper[x]))
if(length(index)<1) cbind(S = NA, M = mBounds$med[x], Ml = mBounds$lower[x], Mu = mBounds$upper[x])
else cbind(S = S[index], M = mBounds$med[x], Ml = mBounds$lower[x], Mu = mBounds$upper[x])
})
sBounds <- do.call(rbind, sBounds)
rownames(sBounds) <- seq(1, nrow(sBounds))
return(as.data.frame(sBounds))
}
.dfunc <- function(x){
sbar <- sd(x, na.rm = TRUE)
mbar <- mean(x, na.rm = TRUE)
return(1/(sbar*sqrt(2*pi))*exp(-1/2*((x-mbar)/sbar)^2))
}
.pickM <- function(dM){
m = as.numeric(sample(dM$x, 1, prob = dM$y))
return(m)
}
# .pickS <- function(MStable, m){
#   j <- which(MStable$Ml <= m & MStable$Mu > m)
#   if(length(j)<1) {s <- min(dS$x, na.rm = TRUE); cat('min S used for m:', m, '\n')}
#   else {
#     tmpS <- MStable$S[j]
# #    if(length(tmpS)>2){
# #      dS <- density(tmpS, na.rm = TRUE)
# #      s <- sample(dS$x[dS$x>0], 1, replace = FALSE)#, prob = pchisq(dS$x[dS$x>0], df = 1, ncp = m, lower.tail = FALSE))
#       s <- sample(tmpS, 1)#, prob = pchisq(tmpS, df = 1, ncp = m, lower.tail = FALSE))
# #    }
# #    else s <- sample(tmpS, 1)
#     }
#   return(s)
# }
.pickS <- function(MStable, m){
j <- which(MStable$Ml <= m & MStable$Mu > m)
#  if(length(j)<1) {s <- min(dS$x, na.rm = TRUE); cat('min S used for m:', m, '\n')}
if(length(j)<1) {s <- min(MStable$S, na.rm = TRUE); cat('min S used for m:', m, '\n')}  else {
tmpS <- MStable$S[j]
if(length(tmpS)>2)
s <- sample(tmpS, 1, prob = pchisq(tmpS, df = 1, ncp = m, lower.tail = FALSE))
else s <- sample(tmpS, 1)
}
return(s)
}
.generateRandom <- function(Mvector, Svector, n, p){
# provide a vector of means and a vector of corresponding Sdev
# n samples, p probes
# returns a (p, n) matrix of random probes
dM <- density(Mvector)
MStable <- .computeBounds(Mvector, Svector)
output <- lapply(seq(1, p),
function(x){ if(x%%ceiling(p/10) == 0) cat(x, '\t')
m <- max(min(MStable$M),.pickM(dM))
if(is.na(m)) stop('m is NA')
s <- .pickS(MStable, m)
values <- rnorm(n, m, s)
if(any(is.na(values))) stop('s', s, 'is NA for m:', m)
return(values)
})
output <- do.call(rbind, output)
rownames(output) <- paste0('random', seq(1, nrow(output)))
colnames(output) <- paste0('sample', seq(1, ncol(output)))
return(output)
}
.generateGrps <- function(Mvector, Svector, n, p, grps = NULL, nGrp = 2, minP = 0.3, maxP = 0.8){
# Provide vector of means and coresspondong Sdev
# n, p : number of samples (provides if grps if not provided), number of probes, resp.
# minP, maxP : min and max proportion of samples in a grp for which a specif probe is generated.
# Returns a (p, n) matrix of probes specific to grps and the vector of grps as a list.
# if grps not provided, generate random grps according to nGrps
if(is.null(grps))
grps <- factor(rbinom(n, nGrp - 1, 0.5), labels = LETTERS[1:nGrp])
else if(!is.factor(grps)) grps <- as.factor(grps)
if(length(grps) != n) n <- length(grps)
nGrps <- nlevels(grps)
dM <- density(Mvector)
MStable <- .computeBounds(Mvector, Svector)
output <- lapply(seq(1, p),
function(x){ if(x%%ceiling(p/10) == 0) cat(x, '\t')
m <- max(min(MStable$M),.pickM(dM))
if(is.na(m)) stop('m is NA')
grp <- sample(levels(grps), 1)
s <- .pickS(MStable, m)
values <- rnorm(n, m, s)
# with respect to grps but some samples only, according to minP/maxP
idx <- sample(which(grps == grp))
rbi <- rbinom(length(idx), 1, prob = sample(seq(minP, maxP, by = 0.05), 1))
idx <- idx[rbi == 1]
change <- sample(c('inc', 'dec'), 1)
if(change == 'inc')
newmu <- min(max(MStable$M)*0.95, m*sample(seq(1.5, 2.5, by = 0.2), 1))
else
newmu <- max(min(MStable$M)*1.05, m/sample(seq(1.5, 2.5, by = 0.2), 1))
values[idx] <- rnorm(length(idx), newmu, .pickS(MStable, newmu))
if(any(is.na(values))) stop('s', s, 'is NA for m:', m)
return(values)
})
output <- do.call(rbind, output)
rownames(output) <- paste0('signif', seq(1, nrow(output)))
colnames(output) <- paste0('sample', seq(1, ncol(output)))
return(list(Data = output, Grps = grps))
}
require(splines)
source('/Users/fredcommo/Documents/MyProjects/Fred_Scripts/pcaSelect.R')
source('/Users/fredcommo/Documents/MyProjects/Fred_Scripts/pcaInfo.R')
source('/Users/fredcommo/Documents/MyProjects/Fred_Scripts/pcaTrace.R')
source('/Users/fredcommo/Documents/MyProjects/Fred_Scripts/plotPCA.R')
op <- par(no.readonly = TRUE)
.computeBounds <- function(M, S){
mCuts <- cut(M, breaks = seq(min(M, na.rm = TRUE), max(M, na.rm = TRUE), by = 0.2)) #
labs <- levels(mCuts)
mBounds <- cbind.data.frame(lower = as.numeric( sub("\\((.+),.*", "\\1", labs) ),
upper = as.numeric( sub("[^,]*,([^]]*)\\]", "\\1", labs) ))
mBounds$lower[1] <- min(M, na.rm = TRUE)
mBounds$upper[nrow(mBounds)] <- max(M, na.rm = TRUE)
mBounds <- cbind.data.frame(lower = mBounds$lower, med = (mBounds$upper + mBounds$lower)/2, upper = mBounds$upper)
sBounds <- lapply(seq(1, nrow(mBounds)), function(x){
index <- as.numeric(which(M >= mBounds$lower[x] & M < mBounds$upper[x]))
if(length(index)<1) cbind(S = NA, M = mBounds$med[x], Ml = mBounds$lower[x], Mu = mBounds$upper[x])
else cbind(S = S[index], M = mBounds$med[x], Ml = mBounds$lower[x], Mu = mBounds$upper[x])
})
sBounds <- do.call(rbind, sBounds)
rownames(sBounds) <- seq(1, nrow(sBounds))
return(as.data.frame(sBounds))
}
.dfunc <- function(x){
sbar <- sd(x, na.rm = TRUE)
mbar <- mean(x, na.rm = TRUE)
return(1/(sbar*sqrt(2*pi))*exp(-1/2*((x-mbar)/sbar)^2))
}
.pickM <- function(dM){
m = as.numeric(sample(dM$x, 1, prob = dM$y))
return(m)
}
# .pickS <- function(MStable, m){
#   j <- which(MStable$Ml <= m & MStable$Mu > m)
#   if(length(j)<1) {s <- min(dS$x, na.rm = TRUE); cat('min S used for m:', m, '\n')}
#   else {
#     tmpS <- MStable$S[j]
# #    if(length(tmpS)>2){
# #      dS <- density(tmpS, na.rm = TRUE)
# #      s <- sample(dS$x[dS$x>0], 1, replace = FALSE)#, prob = pchisq(dS$x[dS$x>0], df = 1, ncp = m, lower.tail = FALSE))
#       s <- sample(tmpS, 1)#, prob = pchisq(tmpS, df = 1, ncp = m, lower.tail = FALSE))
# #    }
# #    else s <- sample(tmpS, 1)
#     }
#   return(s)
# }
.pickS <- function(MStable, m){
j <- which(MStable$Ml <= m & MStable$Mu > m)
#  if(length(j)<1) {s <- min(dS$x, na.rm = TRUE); cat('min S used for m:', m, '\n')}
if(length(j)<1) {s <- min(MStable$S, na.rm = TRUE); cat('min S used for m:', m, '\n')}  else {
tmpS <- MStable$S[j]
if(length(tmpS)>2)
s <- sample(tmpS, 1, prob = pchisq(tmpS, df = 1, ncp = m, lower.tail = FALSE))
else s <- sample(tmpS, 1)
}
return(s)
}
.generateRandom <- function(Mvector, Svector, n, p){
# provide a vector of means and a vector of corresponding Sdev
# n samples, p probes
# returns a (p, n) matrix of random probes
dM <- density(Mvector)
MStable <- .computeBounds(Mvector, Svector)
output <- lapply(seq(1, p),
function(x){ if(x%%ceiling(p/10) == 0) cat(x, '\t')
m <- max(min(MStable$M),.pickM(dM))
if(is.na(m)) stop('m is NA')
s <- .pickS(MStable, m)
values <- rnorm(n, m, s)
if(any(is.na(values))) stop('s', s, 'is NA for m:', m)
return(values)
})
output <- do.call(rbind, output)
rownames(output) <- paste0('random', seq(1, nrow(output)))
colnames(output) <- paste0('sample', seq(1, ncol(output)))
return(output)
}
.generateGrps <- function(Mvector, Svector, n, p, grps = NULL, nGrp = 2, minP = 0.3, maxP = 0.8){
# Provide vector of means and coresspondong Sdev
# n, p : number of samples (provides if grps if not provided), number of probes, resp.
# minP, maxP : min and max proportion of samples in a grp for which a specif probe is generated.
# Returns a (p, n) matrix of probes specific to grps and the vector of grps as a list.
# if grps not provided, generate random grps according to nGrps
if(is.null(grps))
grps <- factor(rbinom(n, nGrp - 1, 0.5), labels = LETTERS[1:nGrp])
else if(!is.factor(grps)) grps <- as.factor(grps)
if(length(grps) != n) n <- length(grps)
nGrps <- nlevels(grps)
dM <- density(Mvector)
MStable <- .computeBounds(Mvector, Svector)
output <- lapply(seq(1, p),
function(x){ if(x%%ceiling(p/10) == 0) cat(x, '\t')
m <- max(min(MStable$M),.pickM(dM))
if(is.na(m)) stop('m is NA')
grp <- sample(levels(grps), 1)
s <- .pickS(MStable, m)
values <- rnorm(n, m, s)
# with respect to grps but some samples only, according to minP/maxP
idx <- sample(which(grps == grp))
rbi <- rbinom(length(idx), 1, prob = sample(seq(minP, maxP, by = 0.05), 1))
idx <- idx[rbi == 1]
change <- sample(c('inc', 'dec'), 1)
if(change == 'inc')
newmu <- min(max(MStable$M)*0.95, m*sample(seq(1.5, 2.5, by = 0.2), 1))
else
newmu <- max(min(MStable$M)*1.05, m/sample(seq(1.5, 2.5, by = 0.2), 1))
values[idx] <- rnorm(length(idx), newmu, .pickS(MStable, newmu))
if(any(is.na(values))) stop('s', s, 'is NA for m:', m)
return(values)
})
output <- do.call(rbind, output)
rownames(output) <- paste0('signif', seq(1, nrow(output)))
colnames(output) <- paste0('sample', seq(1, ncol(output)))
return(list(Data = output, Grps = grps))
}
kimData = readRDS('/Users/fredcommo/Documents/MyProjects/Kim_Lung/kimData.rds')
eset = kimData$eset
samples <- kimData$samples
M <- apply(eset, 1, mean, na.rm = TRUE)
S <- apply(eset, 1, sd, na.rm = TRUE)
trueDist <- .computeBounds(M, S)
factM <- factor(trueDist$M)
whiteProbes <- lapply(seq(1, 2500), function(x){ if(x%%100 == 0) cat(x, '\t')
x <- sample(eset[sample(1, nrow(eset), 1),])
})
x <- eset[sample(1, nrow(eset), 1),]
sample(x, replace = TRUE)
x
x <- as.numeric(eset[sample(1, nrow(eset), 1),])
x <- as.numeric(eset[sample(1:nrow(eset), 1),])
x
sample(x, replace = TRUE)
whiteProbes <- lapply(seq(1, 100), function(x){ if(x%%100 == 0) cat(x, '\t')
x <- as.numeric(eset[sample(1:nrow(eset), 1),])
return(sample(x, replace = TRUE))
})
Samp <- sample(1:nrow(eset), 1000)
Samp <- sample(1:nrow(eset), 1000)
whiteProbes <- lapply(Samp, function(x){ if(x%%100 == 0) cat(x, '\t')
return(sample(as.numeric(eset[x,]), replace = TRUE))
})
Samp <- sample(1:nrow(eset), 2500)
whiteProbes <- lapply(Samp, function(x){return(sample(as.numeric(eset[x,]), replace = TRUE))})
whiteProbes <- do.call(rbind, whiteProbes)
rownames(whiteProbes) <- paste0('random', seq(1, nrow(whiteProbes)))
whiteM <- apply(whiteProbes, 1, mean, na.rm = TRUE)
whiteS <- apply(whiteProbes, 1, sd, na.rm = TRUE)
whiteProbesTable <- .computeBounds(whiteM, whiteS)
boxplot(log10(whiteProbesTable$S) ~ whiteProbesTable$M, names = round(unique(whiteProbesTable$M), 2),
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
boxplot(log10(whiteProbesTable$S) ~ whiteProbesTable$M,
outpch = 19, outcex = 0.25, col = 'steelblue2', outcol = 'steelblue4',
xlab = 'Means', ylab = 'Log10(Sdev)')
head(samples)
q()
projectId <- "syn1834040"
# note, we recommend using "File" rather than "Data"
myPath <- '/Users/fredcommo/Documents/MyProjects/Projet ACP/Some_TCGA/'
myImage <- "unc.edu_BLCA_IlluminaHiSeq_RNASeqV2.geneExp.whitelist_tumor_syn1571504_PCAfilt.png"
file <- File(paste0(myPath, myImage), parentId=projectId)
file <- synStore(file)
fileHandleId <- file@fileHandle$id
fileWikiUri <- sprintf("/entity/%s/wiki", propertyValue(file, "id"))
require(synapseClient)
synapseLogin('frederic.commo@sagebase.org', 'Se@ttle7')
projectId <- "syn1834040"
# note, we recommend using "File" rather than "Data"
myPath <- '/Users/fredcommo/Documents/MyProjects/Projet ACP/Some_TCGA/'
myImage <- "unc.edu_BLCA_IlluminaHiSeq_RNASeqV2.geneExp.whitelist_tumor_syn1571504_PCAfilt.png"
file <- File(paste0(myPath, myImage), parentId=projectId)
file <- synStore(file)
file
properties(getEntity(projectId))
file <- synStore(file)
file <- storeEntity(file)
projectId <- "syn1834037"
# note, we recommend using "File" rather than "Data"
myPath <- '/Users/fredcommo/Documents/MyProjects/Projet ACP/Some_TCGA/'
myImage <- "unc.edu_BLCA_IlluminaHiSeq_RNASeqV2.geneExp.whitelist_tumor_syn1571504_PCAfilt.png"
file <- File(paste0(myPath, myImage), parentId=projectId)
file <- synStore(file)
file
file <- storeEntity(file)
e <- getEntity('syn1834040')
e@fileHandle$id
file <- storeEntity(file)
traceback()
file<-synStore(file)
traceback()
rm(file)
# note, we recommend using "File" rather than "Data"
myPath <- '/Users/fredcommo/Documents/MyProjects/Projet ACP/Some_TCGA/'
myImage <- "unc.edu_BLCA_IlluminaHiSeq_RNASeqV2.geneExp.whitelist_tumor_syn1571504_PCAfilt_2.png"
file <- File(paste0(myPath, myImage), parentId=projectId)
file <- synStore(file)
fileHandleId <- file@fileHandle$id
fileWikiUri <- sprintf("/entity/%s/wiki", propertyValue(file, "id"))
# we start a wiki
fileWiki<-list()
# we add to our wiki the ID of the previously uploaded file
fileWiki$attachmentFileHandleIds<-list(fileHandleId)
# in the markdown we say to display the image.  Note, 'fileName' is the URLEncoded version of the file chosen above.
fileWiki$markdown<-"${image?fileName=mygraph%2Epng}"
# now 'push' the wiki to Synapse
fileWiki<-synRestPOST(fileWikiUri, fileWiki)
# voila!
onWeb(propertyValue(file, "id"))
require(synapseClient)
require(affy)
synapseLogin()
q()
source('http://depot.sagebase.org/CRAN.R')
pkgInstall("synapseClient")
q()
require(synapseClient)
synapseLogin()
e <- loadEntity('syn1855802')
source(file.path(e$cacheDir, e$files))
e <- loadEntity('syn1855799')
load(file.path(e$cacheDir, e$files))
sangerCells
ge <- getExprs(sangerCells)
head(ge)
ge[1:10, 1:5]
cellList <- getCells(sangerCells)
head(cellList)
source("/Users/fredcommo/Documents/MyProjects/virtualIC50/analysis/data_utils_2.R")
source("/Users/fredcommo/Documents/MyProjects/virtualIC50/analysis/celline_2_tcga_pipeline.R")
.getDataEntity <- function(synId){
e <- loadEntity(synId)
Data <- read.csv(file.path(e$cacheDir, e$files), header = TRUE, sep = ' ',
stringsAsFactors = FALSE)
return(Data)
}
sanger <- loadEntity('syn1690438') # Charles' synId
names(sanger$objects$sanger_data)
#########################################
# Curate Sanger cells information
Info <- sanger$objects$sanger_data$sanger_info
Info <- cbind.data.frame(row.names = rownames(Info), cosmicId = Info[,2],
cancerType = Info[,3], origin = Info[,4])
Info <- Info[order(rownames(Info)),]
# Curate Sanger AUC and IC50
# ent <- loadEntity('syn1419911') # From the jira page at https://sagebionetworks.jira.com/wiki/display/METAGENOMICS/Cancer+Cell+Line+Data
AUC <- .getDataEntity('syn1836925')       # Last release, In sock 2013-05-09
AUC <- AUC[order(rownames(AUC)), order(colnames(AUC))]
IC50 <- .getDataEntity('syn1836934')      # Last release, In sock 2013-05-09
IC50 <- IC50[order(rownames(IC50)), order(colnames(IC50))]
cellNames <- toupper(gsub('\\W', '', rownames(Info)))
ICnames <- toupper(gsub('\\W', '', colnames(IC50)))
ICmatch <- lapply(1:nrow(Info), function(i){
cellName <- cellNames[i]
matchName <- NA
cat(i, cellName, '\t')
if(any(grep(paste0('^', cellName, '$'), ICnames)))
matchName <- colnames(IC50)[grep(paste0('^', cellName, '$'), ICnames)]
cat(matchName, '\n')
return (data.frame(cellName = rownames(Info)[i], ICid = matchName))
})
ICmatch <- do.call(rbind, ICmatch)
dim(ICmatch); head(ICmatch, n = 20)
# curate Sanger drug information
drugs <- sanger$objects$sanger_data$sanger_drug_info
drugs <- drugs[order(drugs$Name),]
drugNames <- toupper(gsub('\\W', '', drugs$Name))
drugMatch <- lapply(1:length(drugNames), function(i){
drugName <- drugs$Name[i]
matchName <- NA
cat(i, drugName, '\t')
if(any(grepl(paste0('^',drugNames[i], '$'), rownames(IC50))))
matchName <- rownames(IC50)[grepl(paste0('^',drugNames[i], '$'), rownames(IC50))]
cat(matchName, '\n')
return(data.frame(drugName = drugName, shortName = matchName))
})
drugMatch <- do.call(rbind, drugMatch)
dim(drugMatch); head(drugMatch)
drugs <- cbind.data.frame(drugs[,1:2], IC50id = drugMatch$shortName, drugs[,-c(1:2)])
# Curate GE and add GE ids to Info
sangerGE <- exprs(getSangerExpr_MetaGenomics()) # Curated by Brig, modified by Brian 2012-09-04, syn427896
sangerGE <- sangerGE[ ,order(colnames(sangerGE))]
GEnames <- toupper(gsub('_.*', '', colnames(sangerGE)))
cellMatchGE <- lapply(1:length(cellNames), function(i){
cellName <- as.character(cellNames[i])
matchName <- NA
cat(i, cellName, '\t')
if(any(grepl(paste0('^',cellName, '$'), GEnames)))
matchName <- colnames(sangerGE)[grep(paste0('^',cellName, '$'), GEnames)]
cat(matchName, '\n')
return(data.frame(cellName = cellName, GEname = matchName))
})
cellMatchGE <- do.call(rbind, cellMatchGE)
dim(cellMatchGE); head(cellMatchGE)
# Curate CNV and add CNV ids to Info
sanger <- loadEntity('syn1690438')
sangerCNV <- sanger$objects$sanger_data$sanger_cnv  # syn1417761
colnames(sangerCNV)[12] <- '7860_KIDNEY' # wrong annotation: was annotated 786O_KIDNEY instead of 7860_KIDNEY
sangerCNV <- sangerCNV[,order(colnames(sangerCNV))]
CNVnames <- toupper(gsub('_.*', '', colnames(sangerCNV)))
cellMatchCNV <- lapply(1:length(cellNames), function(i){
cellName <- as.character(cellNames[i])
matchName <- NA
cat(i, cellName, '\t')
if(any(grepl(paste0('^',cellName, '$'), CNVnames)))
matchName <- colnames(sangerCNV)[grep(paste0('^',cellName, '$'), CNVnames)]
cat(matchName, '\n')
return(data.frame(cellName = cellName, CNVname = matchName))
})
cellMatchCNV <- do.call(rbind, cellMatchCNV)
dim(cellMatchCNV); head(cellMatchCNV)
# Curate mutations
mut <- .getDataEntity('syn1836914')
mut <- mut[order(rownames(mut)), order(colnames(mut))]
mutNames <- toupper(gsub('_.*', '', colnames(mut)))
cellMatchMut <- lapply(1:length(cellNames), function(i){
cellName <- as.character(cellNames[i])
matchName <- NA
cat(i, cellName, '\t')
if(any(grepl(paste0('^',cellName, '$'), mutNames)))
matchName <- colnames(mut)[grep(paste0('^',cellName, '$'), mutNames)]
cat(matchName, '\n')
return(data.frame(cellName = cellName, mutName = matchName))
})
cellMatchMut <- do.call(rbind, cellMatchMut)
dim(cellMatchMut); head(cellMatchMut)
# Add ICids, GE ids, CNV ids and mutation ids to Info
fullInfo <- cbind.data.frame(Info, drugTestId = ICmatch$ICid, GEid = cellMatchGE$GEname,
CNVid = cellMatchCNV$CNVname, MUTid = cellMatchMut$mutName)
synIds <- data.frame(Data = c('GeneExpr', 'CopyNumber', 'Mutations', 'IC50', 'AUC', 'DrugInfo', 'CellsInfo'),
synId = c('syn427896', 'syn1417761', 'syn1836914', 'syn1836934', 'syn1836925', NA, NA))
#########################################
# Build a Robject
# Constructor.
setClass('cellLinesObj',
representation(synId = 'data.frame',						# a data frame containing the synIds!
exprSet = 'data.frame',					# a data.frame containing the expression set
cnvSet = 'data.frame', 					# a data.frame containing the CNV.
mutSet = 'data.frame',   				# a data.frame containing the mutations.
IC50 = 'data.frame',				    # a data.frame containing the IC50.
AUC = 'data.frame',					    # a data.frame containing the AUC50.
drugInfo = 'data.frame',  			# a data.frame containing information about drugs.
cellsInfo = 'data.frame')				# # a data.frame containing information about the cell lines.
)
cellsObj <- function(synId, exprSet, cnvSet, mutSet, IC50, AUC, drugInfo, cellsInfo)
{
new('cellLinesObj', synId = synIds, exprSet = exprSet, cnvSet = cnvSet, mutSet = mutSet,
IC50 = IC50, AUC = AUC, drugInfo = drugInfo, cellsInfo = cellsInfo)
}
# Accessors
setGeneric("getInfo", function(object, arg = NULL,...) standardGeneric("getInfo"))
setGeneric("getExprs", function(object, arg = NULL,...) standardGeneric("getExprs"))
setGeneric("getCNV", function(object, arg = NULL,...) standardGeneric("getCNV"))
setGeneric("getMut", function(object, arg = NULL,...) standardGeneric("getMut"))
setGeneric("getIC50", function(object, arg = NULL,...) standardGeneric("getIC50"))
setGeneric("getAUC", function(object, arg = NULL,...) standardGeneric("getAUC"))
setGeneric("getDrugs", function(object, arg = NULL,...) standardGeneric("getDrugs"))
setGeneric("getCells", function(object, arg = NULL,...) standardGeneric("getCells"))
setMethod('getInfo', signature = 'cellLinesObj', function(object, arg = NULL,...){out = data.frame(object@synId); return(out)})
setMethod('getExprs', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@exprSet)})
setMethod('getCNV', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@cnvSet)})
setMethod('getMut', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@mutSet)})
setMethod('getIC50', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@IC50)})
setMethod('getAUC', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@AUC)})
setMethod('getDrugs', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@drugInfo)})
setMethod('getCells', signature = 'cellLinesObj', function(object, arg = NULL,...){return(object@cellsInfo)})
# ShowMethod
setGeneric("show", function(object, arg = NULL,...) standardGeneric("show"))
setMethod('show', signature = 'cellLinesObj',
function(object){
out <- rbind.data.frame(dim(getExprs(object)), dim(getCNV(object)),
dim(getMut(object)), dim(getIC50(object)),
dim(getAUC(object)), dim(getDrugs(object)),
dim(getCells(object)))
colnames(out) <- c('nRow', 'nCol')
out <- cbind.data.frame(getInfo(object), out)
cat('\nInstance of class', class(object), 'with', length(slotNames(object)), 'slot(s)', '\n\n')
cat('Use getInfo(object) to get the synIds')
cat('\n\nAccessor functions:
getExprs(object), getCNV(object), getMut(object), getIC50(object),
getAUC(object), getDrugs(object), getCells(object)\n\n')
print(out)
})
sangerCells <- cellsObj(synId = synIds, exprSet = as.data.frame(sangerGE), cnvSet = as.data.frame(sangerCNV),
mutSet = as.data.frame(mut), IC50 = as.data.frame(IC50), AUC = as.data.frame(AUC),
drugInfo = as.data.frame(drugs), cellsInfo = as.data.frame(fullInfo))
# Store locally
setwd('/Users/fredcommo/Documents/MyProjects/CellLines/SangerCells/')
save(sangerCells, file = 'sangerCells.RData')
q()
